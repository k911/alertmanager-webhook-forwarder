version: 2.1
# orbs:
#   codecov: codecov/codecov@1.0.5
aliases:

  - &dump-coverage-env
    run:
      name: Dump coverage env for hash
      command: |-
        echo "COVERAGE=1" >> dumped.env;

  - &dump-env-vars
    run:
      name: Dump env for hash
      command: |-
        echo "GOLANG_VERSION=$GOLANG_VERSION" >> dumped.env;
        cat dumped.env;

  - &restore-docker-cache
    restore_cache:
      keys:
        - docker-{{ checksum "dumped.env" }}-{{ checksum "Dockerfile" }}-{{ checksum "docker-compose.yml" }}-{{ checksum "go.sum" }}
        - docker-{{ checksum "dumped.env" }}-{{ checksum "Dockerfile" }}-{{ checksum "docker-compose.yml" }}
        - docker-{{ checksum "dumped.env" }}-{{ checksum "Dockerfile" }}
        - docker-{{ checksum "dumped.env" }}
        - docker

  - &load-docker-cache
    run:
      name: Load Docker layer cache
      command: |-
        # credits to: https://blog.jondh.me.uk/2018/04/strategies-for-docker-layer-caching-in-circleci/
        set +o pipefail
        if [ -f /home/circleci/caches/${CIRCLE_PROJECT_REPONAME}.tar.gz ]; then
          gunzip -c /home/circleci/caches/${CIRCLE_PROJECT_REPONAME}.tar.gz | docker load;
          docker images;
        fi

  - &docker-compose-build
    run:
      name: Docker-Compose Build
      command: docker-compose build --pull lint

  - &code-style-analysis
    run:
      name: Code style analysis
      command: docker-compose run --rm lint

  - &export-docker-cache
    run:
      name: Export Docker image layer cache
      command: |-
        mkdir -p /home/circleci/caches
        docker-compose build lint | grep '\-\-\->' | grep -v 'Using cache' | sed -e 's/[ >-]//g' > /tmp/layers.txt
        docker save $(cat /tmp/layers.txt) | gzip > /home/circleci/caches/${CIRCLE_PROJECT_REPONAME}.tar.gz

  - &save-docker-cache
    save_cache:
      key: docker-{{ checksum "dumped.env" }}-{{ checksum "Dockerfile" }}-{{ checksum "docker-compose.yml" }}-{{ checksum "go.sum" }}
      paths:
        - /home/circleci/caches

  - &get-current-version-env
    run:
      name: Export current version from tag to env variable
      command: |-
        CURRENT_VERSION="$(git tag -l | sort -V -r | head -1 | sed -E 's/v(.*)/\1/')"
        if [ "" == "$CURRENT_VERSION" ]; then CURRENT_VERSION="0.0.0"; fi
        echo "CURRENT_VERSION=$CURRENT_VERSION"
        echo "export CURRENT_VERSION='$CURRENT_VERSION'" >> $BASH_ENV

  # Build environments
  - &docker-env
    working_directory: ~/workdir
    machine:
      enabled: true
      # Ubuntu 16.04, docker 18.09.3, docker-compose 1.23.1
      image: ubuntu-1604:201903-01

  # Steps
  - &docker-default
    steps:
      - checkout
      - *dump-env-vars
      - *restore-docker-cache
      - *load-docker-cache
      - *docker-compose-build
      - *code-style-analysis
      - *export-docker-cache
      - *save-docker-cache

  # Filters
  - &pull-request-checks-job-filters
    filters:
      branches:
        ignore:
          - master

  - &release-job-filters
    filters:
      tags:
        ignore: /.*/
      branches:
        only:
          - master

jobs:
  go-default:
    <<: *docker-env
    <<: *docker-default
    environment:
      GOLANG_TAG: 1.12.6-alpine3.10

  go-latest:
    <<: *docker-env
    <<: *docker-default
    environment:
      GOLANG_TAG: alpine

  release-version:
    docker:
      - image: node:lts-alpine
    steps:
      - run:
          name: Install deps
          command: |-
            apk add --no-cache --quiet git openssh bash coreutils
            yarn global add conventional-changelog-cli conventional-recommended-bump conventional-github-releaser
      - checkout
      - *get-current-version-env
      - run:
          name: Run release script
          command: bash .circleci/release-version.sh

  validate-commit-message:
    docker:
      - image: node:lts-alpine
    steps:
      - checkout
      - run:
          name: Install commitlint
          command: yarn global add @commitlint/cli @commitlint/config-conventional
      - run:
          name: Validate commit message format
          command: commitlint --from=HEAD~1

workflows:
  version: 2.1
  pull-request-checks:
    jobs:
      - validate-commit-message:
          <<: *pull-request-checks-job-filters
      - go-default:
          <<: *pull-request-checks-job-filters
      - go-latest:
          <<: *pull-request-checks-job-filters
  release:
    jobs:
      - validate-commit-message:
          <<: *release-job-filters
      - go-default:
          <<: *release-job-filters
      - go-latest:
          <<: *release-job-filters
      - approve-release:
          type: approval
          requires:
            # - go-latest
            # - go-default
            - validate-commit-message
      - release-version:
          <<: *release-job-filters
          requires:
            - approve-release
